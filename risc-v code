
.eqv BG_COLOR, 0x0F	 # light blue (0/7 red, 3/7 green, 3/3 blue)
.eqv VG_ADDR, 0x11000120
.eqv VG_COLOR, 0x11000140
.eqv BTNU_RD, 0x11001100
.eqv BTND_RD, 0x11001110
.eqv BTNR_RD, 0x11001120
.eqv BTNL_RD, 0x11001130

main:
    li sp, 0x10000     #initialize stack pointer
	  li s2, VG_ADDR     #load MMIO addresses 
	  li s3, VG_COLOR  

    li s4, BTNU_RD  # button values
    li s5, BTND_RD  
    li s6, BTNR_RD 
    li s7, BTNL_RD 
    li t0, 25 # this is the snake's x cor
    li t1, 35 # this is the snake's y cor

	# fill screen using default color
	call draw_background  # must not modify s2, s3



loop: # get new x cors 
    lw s9, 0(s4) #up button read
    lw s10, 0(s5) #down button read
    lw s11, 0(s4) #right
    lw x31, 0(s5) #left

ISR: #changes button direction
    lw s9, 0(s4) #up button read
    lw s10, 0(s5) #down button read
    lw s11, 0(s4) #right
    lw x31, 0(s5) #left
    bne s9, 1, 4 #skip over if BTNU is pressed
    addi a1, a1, 1 #add one to the y cor
    bne s10, 1, 4 # go to next if button is not pressed
	  addi a1, a1, -1
    bne s11, 1, 4 # go to next if button is not pressed
	 addi a0, a0, 1
	  bne x31, 1, 4 # go to next if button is not pressed 
    addi a0, a0, -1
    

draw_dot:
	andi t0,a0,0x7F	# select bottom 7 bits (col)
	andi t1,a1,0x3F	# select bottom 6 bits  (row)
	slli t1,t1,7	#  {a1[5:0],a0[6:0]} 
	or t0,t1,t0	# 13-bit address
	sw t0, 0(s2)	# write 13 address bits to register
	sw a3, 0(s3)	# write color data to frame buffer
	ret

draw_background:
	addi sp,sp,-4
	sw ra, 0(sp)
	li a3, BG_COLOR	#use default color
	li a1, 0	#a1= row_counter
	li t4, 60 	#max rows
